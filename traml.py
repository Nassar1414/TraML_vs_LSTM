# -*- coding: utf-8 -*-
"""TraML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cMyMPelor0Agks_P3tmo3o59P1lM6EEO
"""

# Install required packages
!pip install imblearn xgboost
!pip install imbalanced-learn

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from imblearn.over_sampling import SMOTE

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Load and preprocess the dataset
df = pd.read_csv("/content/drive/MyDrive/Research/natural_disasters_2024.csv")
df["Date"] = pd.to_datetime(df["Date"])
df = df.sort_values(by="Date")

# Load dataset
df = pd.read_csv("/content/drive/MyDrive/Research/natural_disasters_2024.csv")
# Convert 'Date' column to datetime format
df["Date"] = pd.to_datetime(df["Date"])

# Create binary target column: Disaster_Occurred
# Simulate no-disaster rows by randomly flipping some Disaster_Occurred to 0 (since we only have disasters)
df["Disaster_Occurred"] = 1
df.loc[df.sample(frac=0.3, random_state=42).index, "Disaster_Occurred"] = 0

# Extract time-based features
df["Year"] = df["Date"].dt.year
df["Month"] = df["Date"].dt.month
df["Day"] = df["Date"].dt.day
df["Day_of_Week"] = df["Date"].dt.dayofweek
df["Hour"] = df["Date"].dt.hour

# Drop unused columns
df.drop(columns=["Disaster_ID", "Date"], inplace=True)

# Encode categorical features
df["Disaster_Type"] = LabelEncoder().fit_transform(df["Disaster_Type"])
df["Location"] = LabelEncoder().fit_transform(df["Location"])

# Define features and target
X = df.drop(columns=["Disaster_Occurred"])
y = df["Disaster_Occurred"]

# Normalize numeric features
scaler = MinMaxScaler()
X[["Magnitude", "Fatalities", "Economic_Loss($)"]] = scaler.fit_transform(
    X[["Magnitude", "Fatalities", "Economic_Loss($)"]]
)

# Balance the dataset using SMOTE
from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Done — you can now proceed with training models
print("✅ Dataset ready for training. Balanced target distribution:")
print(y_resampled.value_counts())

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Train all models
models = {
    "Decision Tree": DecisionTreeClassifier(
        max_depth=5,
        min_samples_split=10,
        min_samples_leaf=5,
        random_state=42
    ),

    "Random Forest": RandomForestClassifier(
        n_estimators=100,
        max_depth=10,
        min_samples_split=10,
        min_samples_leaf=5,
        class_weight="balanced",
        random_state=42
    ),

    "XGBoost": XGBClassifier(
        n_estimators=100,
        max_depth=5,
        learning_rate=0.05,
        subsample=0.8,
        colsample_bytree=0.8,
        use_label_encoder=False,
        eval_metric="logloss",
        random_state=42
    )
}

# Fit and evaluate each model
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    print(f"\n{name} Results:")
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
    print("Classification Report:")
    print(classification_report(y_test, y_pred))
    # Plot confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(5, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
                xticklabels=["No Disaster", "Disaster"],
                yticklabels=["No Disaster", "Disaster"])
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.title(f"{name} Confusion Matrix")
    plt.show()

# Plot feature importance for Random Forest
rf_model = models["Random Forest"]
feature_importance = rf_model.feature_importances_
sorted_idx = np.argsort(feature_importance)[::-1]

plt.figure(figsize=(8, 5))
sns.barplot(x=feature_importance[sorted_idx], y=X.columns[sorted_idx], palette="viridis")
plt.title("Feature Importance (Random Forest)")
plt.xlabel("Importance Score")
plt.ylabel("Feature")
plt.tight_layout()
plt.show()

# Loop through each model and print train/test accuracy
for name, model in models.items():
    train_acc = model.score(X_train, y_train)
    test_acc = model.score(X_test, y_test)
    print(f"\n{name} Accuracy:")
    print(f"  Train Accuracy: {train_acc:.4f}")
    print(f"  Test Accuracy:  {test_acc:.4f}")

from imblearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import cross_val_score

# Wrap each model in a pipeline: SMOTE → Model
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier

models = {
    "Decision Tree": Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("model", DecisionTreeClassifier(
            max_depth=5, min_samples_split=10, min_samples_leaf=5, random_state=42))
    ]),

    "Random Forest": Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("model", RandomForestClassifier(
            n_estimators=100, max_depth=10, min_samples_split=10,
            min_samples_leaf=5, class_weight="balanced", random_state=42))
    ]),

    "XGBoost": Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("model", XGBClassifier(
            n_estimators=100, max_depth=5, learning_rate=0.05,
            subsample=0.8, colsample_bytree=0.8,
            use_label_encoder=False, eval_metric="logloss", random_state=42))
    ])
}

# Run CV again
for name, pipeline in models.items():
    scores = cross_val_score(pipeline, X, y, cv=5, scoring='accuracy')
    print(f"{name}:")
    print(f"  Mean Accuracy     = {np.mean(scores):.4f}")
    print(f"  Standard Deviation = {np.std(scores):.4f}")
    print("-" * 40)

from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/Research/natural_disasters_2024.csv")
# Convert 'Date' column to datetime format
df["Date"] = pd.to_datetime(df["Date"])

# Create binary target column: Disaster_Occurred
# Simulate no-disaster rows by randomly flipping some Disaster_Occurred to 0 (since we only have disasters)
df["Disaster_Occurred"] = 1
df.loc[df.sample(frac=0.3, random_state=42).index, "Disaster_Occurred"] = 0

# Extract time-based features
df["Year"] = df["Date"].dt.year
df["Month"] = df["Date"].dt.month
df["Day"] = df["Date"].dt.day
df["Day_of_Week"] = df["Date"].dt.dayofweek
df["Hour"] = df["Date"].dt.hour

# Drop unused columns
df.drop(columns=["Disaster_ID", "Date"], inplace=True)

# Encode categorical features
df["Disaster_Type"] = LabelEncoder().fit_transform(df["Disaster_Type"])
df["Location"] = LabelEncoder().fit_transform(df["Location"])

# Define features and target
X = df.drop(columns=["Disaster_Occurred"])
y = df["Disaster_Occurred"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


mlp_model = MLPClassifier(hidden_layer_sizes=(100, 50), activation='relu', solver='adam',
                          max_iter=300, random_state=42)


mlp_model.fit(X_train, y_train)


y_pred = mlp_model.predict(X_test)


train_accuracy = mlp_model.score(X_train, y_train)
test_accuracy = mlp_model.score(X_test, y_test)

print(f'Training Accuracy: {round(train_accuracy*100, 2)}%')
print(f'Testing Accuracy: {round(test_accuracy*100, 2)}%')

print("\n Classification Report:")
print(classification_report(y_test, y_pred))